// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using MSC.ConferenceMate.API.Client.Interface;
using MSC.ConferenceMate.Model.CM.Interface;
using xDTO = MSC.ConferenceMate.DTO.CM;

namespace MSC.ConferenceMate.Model.CM
{

	public class LoadRequestFeaturedEvent : EventArgs
	{
		public LoadRequestFeaturedEvent(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class FeaturedEvent : BaseModel<IWebApiDataServiceCM>, IFeaturedEvent
	{
		public event EventHandler<LoadRequestFeaturedEvent> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.FeaturedEvent _dto = null;

		public FeaturedEvent(ILoggingService log, IDataService<IWebApiDataServiceCM> dataService) : base(log, dataService)
		{
			_dto = new xDTO.FeaturedEvent();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public FeaturedEvent(ILoggingService log, IDataService<IWebApiDataServiceCM> dataService, xDTO.FeaturedEvent dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual string Description { get { return _dto.Description; } }
		public virtual System.DateTime? EndTime { get { return _dto.EndTime; } }
		public virtual int FeaturedEventId { get { return _dto.FeaturedEventId; } }
		public virtual bool IsAllDay { get { return _dto.IsAllDay; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual string Location { get { return _dto.Location; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual string ShortTitle { get { return _dto.ShortTitle; } }
		public virtual System.DateTime? StartTime { get { return _dto.StartTime; } }
		public virtual string Title { get { return _dto.Title; } }

		private List<IFeedback> _feedbacks = null; // Reverse Navigation
		private List<ISponsorFeaturedEvent> _sponsorFeaturedEvents = null; // Reverse Navigation


		public virtual List<IFeedback> Feedbacks
		{
			get
			{
				if (_feedbacks == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.Feedbacks != null)
					{	// The core DTO object has data for this property, load it into the model.
						_feedbacks = new List<IFeedback>();
						foreach (var dtoItem in _dto.Feedbacks)
						{
							_feedbacks.Add(new Feedback(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestFeaturedEvent(nameof(Feedbacks)));
					}
				}

				return _feedbacks;
			}
		}

		public virtual List<ISponsorFeaturedEvent> SponsorFeaturedEvents
		{
			get
			{
				if (_sponsorFeaturedEvents == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.SponsorFeaturedEvents != null)
					{	// The core DTO object has data for this property, load it into the model.
						_sponsorFeaturedEvents = new List<ISponsorFeaturedEvent>();
						foreach (var dtoItem in _dto.SponsorFeaturedEvents)
						{
							_sponsorFeaturedEvents.Add(new SponsorFeaturedEvent(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestFeaturedEvent(nameof(SponsorFeaturedEvents)));
					}
				}

				return _sponsorFeaturedEvents;
			}
		}



	}
}
