// <auto-generated> - Template:ModelsBackedByDto, Version:1.1, Id:f1539c0d-024f-4b1f-b346-132cdd9dd31f
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using System;
using System.Collections.Generic;
using System.Linq;
using MSC.ConferenceMate.API.Client.Interface;
using MSC.ConferenceMate.Model.CM.Interface;
using xDTO = MSC.ConferenceMate.DTO.CM;

namespace MSC.ConferenceMate.Model.CM
{

	public class LoadRequestSession : EventArgs
	{
		public LoadRequestSession(string propertyNameRequestingLoad)
		{
			PropertyNameRequestingLoad = propertyNameRequestingLoad;
		}

		public string PropertyNameRequestingLoad { get; set; }
	}


	public partial class Session : BaseModel<IWebApiDataServiceCM>, ISession
	{
		public event EventHandler<LoadRequestSession> OnLazyLoadRequest = delegate { }; // Empty delegate. Thus we are sure that value is always != null because no one outside of the class can change it.
		private xDTO.Session _dto = null;

		public Session(ILoggingService log, IDataService<IWebApiDataServiceCM> dataService) : base(log, dataService)
		{
			_dto = new xDTO.Session();
			OnLazyLoadRequest += HandleLazyLoadRequest;
		}

		public Session(ILoggingService log, IDataService<IWebApiDataServiceCM> dataService, xDTO.Session dto) : this(log, dataService)
		{
			_dto = dto;
		}


		public virtual string CreatedBy { get { return _dto.CreatedBy; } }
		public virtual System.DateTime CreatedUtcDate { get { return _dto.CreatedUtcDate; } }
		public virtual int DataVersion { get { return _dto.DataVersion; } }
		public virtual string Description { get { return _dto.Description; } }
		public virtual System.DateTime? EndTime { get { return _dto.EndTime; } }
		public virtual bool IsDeleted { get { return _dto.IsDeleted; } }
		public virtual string ModifiedBy { get { return _dto.ModifiedBy; } }
		public virtual System.DateTime ModifiedUtcDate { get { return _dto.ModifiedUtcDate; } }
		public virtual int? RoomId { get { return _dto.RoomId; } }
		public virtual int SessionId { get { return _dto.SessionId; } }
		public virtual string ShortTitle { get { return _dto.ShortTitle; } }
		public virtual System.DateTime? StartTime { get { return _dto.StartTime; } }
		public virtual string Title { get { return _dto.Title; } }

		private IRoom _room = null; // Foreign Key
		private List<IFeedback> _feedbacks = null; // Reverse Navigation
		private List<ISessionLike> _sessionLikes = null; // Reverse Navigation
		private List<ISessionSessionCategoryType> _sessionSessionCategoryTypes = null; // Reverse Navigation
		private List<ISessionSpeaker> _sessionSpeakers = null; // Reverse Navigation


		public virtual IRoom Room
		{
			get
			{
				if (_room == null && _dto != null && _dto.Room != null)
				{
					_room = new Room(Log, DataService, _dto.Room);
				}

				return _room;
			}
		}

		public virtual List<IFeedback> Feedbacks
		{
			get
			{
				if (_feedbacks == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.Feedbacks != null)
					{	// The core DTO object has data for this property, load it into the model.
						_feedbacks = new List<IFeedback>();
						foreach (var dtoItem in _dto.Feedbacks)
						{
							_feedbacks.Add(new Feedback(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestSession(nameof(Feedbacks)));
					}
				}

				return _feedbacks;
			}
		}

		public virtual List<ISessionLike> SessionLikes
		{
			get
			{
				if (_sessionLikes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.SessionLikes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_sessionLikes = new List<ISessionLike>();
						foreach (var dtoItem in _dto.SessionLikes)
						{
							_sessionLikes.Add(new SessionLike(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestSession(nameof(SessionLikes)));
					}
				}

				return _sessionLikes;
			}
		}

		public virtual List<ISessionSessionCategoryType> SessionSessionCategoryTypes
		{
			get
			{
				if (_sessionSessionCategoryTypes == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.SessionSessionCategoryTypes != null)
					{	// The core DTO object has data for this property, load it into the model.
						_sessionSessionCategoryTypes = new List<ISessionSessionCategoryType>();
						foreach (var dtoItem in _dto.SessionSessionCategoryTypes)
						{
							_sessionSessionCategoryTypes.Add(new SessionSessionCategoryType(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestSession(nameof(SessionSessionCategoryTypes)));
					}
				}

				return _sessionSessionCategoryTypes;
			}
		}

		public virtual List<ISessionSpeaker> SessionSpeakers
		{
			get
			{
				if (_sessionSpeakers == null && _dto != null)
				{	// The core DTO object is loaded, but this property is not loaded.
					if (_dto.SessionSpeakers != null)
					{	// The core DTO object has data for this property, load it into the model.
						_sessionSpeakers = new List<ISessionSpeaker>();
						foreach (var dtoItem in _dto.SessionSpeakers)
						{
							_sessionSpeakers.Add(new SessionSpeaker(Log, DataService, dtoItem));
						}
					}
					else
					{	// Trigger the load data request - The core DTO object is loaded and does not have data for this property.
						OnLazyLoadRequest(this, new LoadRequestSession(nameof(SessionSpeakers)));
					}
				}

				return _sessionSpeakers;
			}
		}



	}
}
