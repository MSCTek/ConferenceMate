// <auto-generated> - Template:WebApiDataService, Version:1.1, Id:424e7ec7-bd9d-4cd3-9257-6ffbc772b82e
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CodeGenHero.Logging;
using CodeGenHero.DataService;
using MSC.ConferenceMate.API.Client.Interface;
using xDTO = MSC.ConferenceMate.DTO.CM;

namespace MSC.ConferenceMate.API.Client
{
	public partial class WebApiDataServiceCM : WebApiDataServiceBase, IWebApiDataServiceCM
	{
		public WebApiDataServiceCM(ILoggingService log, IWebApiExecutionContext context) : base(log, context)
		{ }

		private WebApiDataServiceCM() : base()
		{ }


		#region GetAllPages

		public async Task<IList<xDTO.Announcement>> GetAllPagesAnnouncementsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetAnnouncementsAsync);
		}

		public async Task<IList<xDTO.FeaturedEvent>> GetAllPagesFeaturedEventsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeaturedEventsAsync);
		}

		public async Task<IList<xDTO.Feedback>> GetAllPagesFeedbacksAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeedbacksAsync);
		}

		public async Task<IList<xDTO.FeedbackInitiatorType>> GetAllPagesFeedbackInitiatorTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeedbackInitiatorTypesAsync);
		}

		public async Task<IList<xDTO.FeedbackType>> GetAllPagesFeedbackTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetFeedbackTypesAsync);
		}

		public async Task<IList<xDTO.GenderType>> GetAllPagesGenderTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetGenderTypesAsync);
		}

		public async Task<IList<xDTO.LanguageType>> GetAllPagesLanguageTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLanguageTypesAsync);
		}

		public async Task<IList<xDTO.Log>> GetAllPagesLogsAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLogsAsync);
		}

		public async Task<IList<xDTO.LogType>> GetAllPagesLogTypesAsync(
			string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLogTypesAsync);
		}

		public async Task<IList<xDTO.LookupList>> GetAllPagesLookupListsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetLookupListsAsync);
		}

		public async Task<IList<xDTO.Room>> GetAllPagesRoomsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetRoomsAsync);
		}

		public async Task<IList<xDTO.Session>> GetAllPagesSessionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSessionsAsync);
		}

		public async Task<IList<xDTO.SessionCategoryType>> GetAllPagesSessionCategoryTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSessionCategoryTypesAsync);
		}

		public async Task<IList<xDTO.SessionLike>> GetAllPagesSessionLikesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSessionLikesAsync);
		}

		public async Task<IList<xDTO.SessionSessionCategoryType>> GetAllPagesSessionSessionCategoryTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSessionSessionCategoryTypesAsync);
		}

		public async Task<IList<xDTO.SessionSpeaker>> GetAllPagesSessionSpeakersAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSessionSpeakersAsync);
		}

		public async Task<IList<xDTO.Sponsor>> GetAllPagesSponsorsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSponsorsAsync);
		}

		public async Task<IList<xDTO.SponsorFeaturedEvent>> GetAllPagesSponsorFeaturedEventsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSponsorFeaturedEventsAsync);
		}

		public async Task<IList<xDTO.SponsorType>> GetAllPagesSponsorTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetSponsorTypesAsync);
		}

		public async Task<IList<xDTO.UserProfile>> GetAllPagesUserProfilesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: 1, pageSize: 100);
			return await GetAllPageDataResultsAsync(pageDataRequest, GetUserProfilesAsync);
		}

		#endregion GetAllPages



		#region GetOnePage

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Announcement>>>> GetAnnouncementsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Announcement>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Announcements", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Announcement>>>> GetAnnouncementsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetAnnouncementsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeaturedEvent>>>> GetFeaturedEventsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.FeaturedEvent>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}FeaturedEvents", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeaturedEvent>>>> GetFeaturedEventsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeaturedEventsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Feedback>>>> GetFeedbacksAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Feedback>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Feedbacks", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Feedback>>>> GetFeedbacksAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeedbacksAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackInitiatorType>>>> GetFeedbackInitiatorTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.FeedbackInitiatorType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}FeedbackInitiatorTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackInitiatorType>>>> GetFeedbackInitiatorTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeedbackInitiatorTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackType>>>> GetFeedbackTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.FeedbackType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.FeedbackType>>>> GetFeedbackTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetFeedbackTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.GenderType>>>> GetGenderTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.GenderType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}GenderTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.GenderType>>>> GetGenderTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetGenderTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LanguageType>>>> GetLanguageTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.LanguageType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}LanguageTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LanguageType>>>> GetLanguageTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLanguageTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Log>>>> GetLogsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Log>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Logs", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Log>>>> GetLogsAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLogsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LogType>>>> GetLogTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.LogType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}LogTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LogType>>>> GetLogTypesAsync(
			string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();

			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLogTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LookupList>>>> GetLookupListsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.LookupList>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}LookupLists", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.LookupList>>>> GetLookupListsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetLookupListsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Room>>>> GetRoomsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Room>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Rooms", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Room>>>> GetRoomsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetRoomsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Session>>>> GetSessionsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Session>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Sessions", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Session>>>> GetSessionsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSessionsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionCategoryType>>>> GetSessionCategoryTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SessionCategoryType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SessionCategoryTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionCategoryType>>>> GetSessionCategoryTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSessionCategoryTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionLike>>>> GetSessionLikesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SessionLike>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SessionLikes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionLike>>>> GetSessionLikesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSessionLikesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionSessionCategoryType>>>> GetSessionSessionCategoryTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SessionSessionCategoryType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SessionSessionCategoryTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionSessionCategoryType>>>> GetSessionSessionCategoryTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSessionSessionCategoryTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionSpeaker>>>> GetSessionSpeakersAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SessionSpeaker>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SessionSpeakers", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SessionSpeaker>>>> GetSessionSpeakersAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSessionSpeakersAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Sponsor>>>> GetSponsorsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.Sponsor>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}Sponsors", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.Sponsor>>>> GetSponsorsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSponsorsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SponsorFeaturedEvent>>>> GetSponsorFeaturedEventsAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SponsorFeaturedEvent>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SponsorFeaturedEvents", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SponsorFeaturedEvent>>>> GetSponsorFeaturedEventsAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSponsorFeaturedEventsAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SponsorType>>>> GetSponsorTypesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.SponsorType>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}SponsorTypes", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.SponsorType>>>> GetSponsorTypesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetSponsorTypesAsync(pageDataRequest);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UserProfile>>>> GetUserProfilesAsync(IPageDataRequest pageDataRequest)
		{
			List<string> filter = BuildFilter(pageDataRequest.FilterCriteria);
			return await SerializationHelper.Instance.SerializeCallResultsGet<IList<xDTO.UserProfile>>(Log, GetClient(), 
				$"{ExecutionContext.BaseWebApiUrl}UserProfiles", filter, page: pageDataRequest.Page, pageSize: pageDataRequest.PageSize);
		}

		public async Task<IHttpCallResultCGHT<IPageDataT<IList<xDTO.UserProfile>>>> GetUserProfilesAsync(
			DateTime? minModifiedUtcDate = null, bool? isDeleted = null, string sort = null, int page = 1, int pageSize = 100)
		{
			List<IFilterCriterion> filterCriteria = new List<IFilterCriterion>();
			if (minModifiedUtcDate.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "ModifiedUtcDate";
				filterCriterion.FieldType = "DateTime?";
				filterCriterion.FilterOperator = "IsGreaterThan";
				filterCriterion.Value = minModifiedUtcDate;
				filterCriteria.Add(filterCriterion);
			}

			if (isDeleted.HasValue)
			{
				IFilterCriterion filterCriterion = new FilterCriterion();
				filterCriterion.FieldName = "IsDeleted";
				filterCriterion.FieldType = "bool?";
				filterCriterion.FilterOperator = "IsEqualTo";
				filterCriterion.Value = isDeleted;
				filterCriteria.Add(filterCriterion);
			}


			IPageDataRequest pageDataRequest = new PageDataRequest(filterCriteria: filterCriteria, sort: sort, page: page, pageSize: pageSize);
			return await GetUserProfilesAsync(pageDataRequest);
		}

		#endregion GetOnePage



		#region Get By PK

		public async Task<IHttpCallResultCGHT<xDTO.Announcement>> GetAnnouncementAsync(int announcementId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Announcement>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Announcements/{announcementId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeaturedEvent>> GetFeaturedEventAsync(int featuredEventId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.FeaturedEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeaturedEvents/{featuredEventId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Feedback>> GetFeedbackAsync(System.Guid feedbackId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Feedback>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Feedbacks/{feedbackId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackInitiatorType>> GetFeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.FeedbackInitiatorType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackInitiatorTypes/{feedbackInitiatorTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> GetFeedbackTypeAsync(int feedbackTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.FeedbackType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{feedbackTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.GenderType>> GetGenderTypeAsync(int genderTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.GenderType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}GenderTypes/{genderTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> GetLanguageTypeAsync(int languageTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.LanguageType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{languageTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Log>> GetLogAsync(int id, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Log>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Logs/{id}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LogType>> GetLogTypeAsync(int id, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.LogType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LogTypes/{id}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LookupList>> GetLookupListAsync(int lookupListId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.LookupList>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LookupLists/{lookupListId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Room>> GetRoomAsync(int roomId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Room>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Rooms/{roomId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Session>> GetSessionAsync(int sessionId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Session>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Sessions/{sessionId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionCategoryType>> GetSessionCategoryTypeAsync(int sessionCategoryTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SessionCategoryType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionCategoryTypes/{sessionCategoryTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionLike>> GetSessionLikeAsync(int sessionId, int userProfileId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SessionLike>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionLikes/{sessionId}/{userProfileId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionSessionCategoryType>> GetSessionSessionCategoryTypeAsync(int sessionId, int sessionCategoryTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SessionSessionCategoryType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionSessionCategoryTypes/{sessionId}/{sessionCategoryTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionSpeaker>> GetSessionSpeakerAsync(int sessionId, int userProfileId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SessionSpeaker>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionSpeakers/{sessionId}/{userProfileId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Sponsor>> GetSponsorAsync(int sponsorId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.Sponsor>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Sponsors/{sponsorId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SponsorFeaturedEvent>> GetSponsorFeaturedEventAsync(int sponsorId, int featuredEventId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SponsorFeaturedEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SponsorFeaturedEvents/{sponsorId}/{featuredEventId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SponsorType>> GetSponsorTypeAsync(int sponsorTypeId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.SponsorType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SponsorTypes/{sponsorTypeId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UserProfile>> GetUserProfileAsync(int userProfileId, int numChildLevels)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsGet<xDTO.UserProfile>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UserProfiles/{userProfileId}?numChildLevels={numChildLevels}");
			return retVal;
		}

		#endregion Get By PK



		#region Create

			public async Task<IHttpCallResultCGHT<xDTO.Announcement>> CreateAnnouncementAsync(xDTO.Announcement item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Announcement>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Announcements/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeaturedEvent>> CreateFeaturedEventAsync(xDTO.FeaturedEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.FeaturedEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeaturedEvents/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Feedback>> CreateFeedbackAsync(xDTO.Feedback item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Feedback>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Feedbacks/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackInitiatorType>> CreateFeedbackInitiatorTypeAsync(xDTO.FeedbackInitiatorType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.FeedbackInitiatorType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackInitiatorTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> CreateFeedbackTypeAsync(xDTO.FeedbackType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.FeedbackType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.GenderType>> CreateGenderTypeAsync(xDTO.GenderType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.GenderType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}GenderTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> CreateLanguageTypeAsync(xDTO.LanguageType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.LanguageType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LanguageTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Log>> CreateLogAsync(xDTO.Log item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Log>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Logs/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LogType>> CreateLogTypeAsync(xDTO.LogType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.LogType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LogTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LookupList>> CreateLookupListAsync(xDTO.LookupList item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.LookupList>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LookupLists/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Room>> CreateRoomAsync(xDTO.Room item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Room>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Rooms/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Session>> CreateSessionAsync(xDTO.Session item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Session>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Sessions/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionCategoryType>> CreateSessionCategoryTypeAsync(xDTO.SessionCategoryType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SessionCategoryType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionCategoryTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionLike>> CreateSessionLikeAsync(xDTO.SessionLike item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SessionLike>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionLikes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionSessionCategoryType>> CreateSessionSessionCategoryTypeAsync(xDTO.SessionSessionCategoryType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SessionSessionCategoryType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionSessionCategoryTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionSpeaker>> CreateSessionSpeakerAsync(xDTO.SessionSpeaker item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SessionSpeaker>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionSpeakers/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Sponsor>> CreateSponsorAsync(xDTO.Sponsor item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.Sponsor>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Sponsors/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SponsorFeaturedEvent>> CreateSponsorFeaturedEventAsync(xDTO.SponsorFeaturedEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SponsorFeaturedEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SponsorFeaturedEvents/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SponsorType>> CreateSponsorTypeAsync(xDTO.SponsorType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.SponsorType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SponsorTypes/", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UserProfile>> CreateUserProfileAsync(xDTO.UserProfile item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPost<xDTO.UserProfile>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UserProfiles/", item);
				return retVal;
			}

		#endregion Create



		#region Update

			public async Task<IHttpCallResultCGHT<xDTO.Announcement>> UpdateAnnouncementAsync(xDTO.Announcement item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Announcement>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Announcements/{item.AnnouncementId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeaturedEvent>> UpdateFeaturedEventAsync(xDTO.FeaturedEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.FeaturedEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeaturedEvents/{item.FeaturedEventId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Feedback>> UpdateFeedbackAsync(xDTO.Feedback item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Feedback>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Feedbacks/{item.FeedbackId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackInitiatorType>> UpdateFeedbackInitiatorTypeAsync(xDTO.FeedbackInitiatorType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.FeedbackInitiatorType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackInitiatorTypes/{item.FeedbackInitiatorTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> UpdateFeedbackTypeAsync(xDTO.FeedbackType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.FeedbackType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{item.FeedbackTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.GenderType>> UpdateGenderTypeAsync(xDTO.GenderType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.GenderType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}GenderTypes/{item.GenderTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> UpdateLanguageTypeAsync(xDTO.LanguageType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.LanguageType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{item.LanguageTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Log>> UpdateLogAsync(xDTO.Log item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Log>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Logs/{item.Id}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LogType>> UpdateLogTypeAsync(xDTO.LogType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.LogType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LogTypes/{item.Id}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.LookupList>> UpdateLookupListAsync(xDTO.LookupList item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.LookupList>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}LookupLists/{item.LookupListId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Room>> UpdateRoomAsync(xDTO.Room item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Room>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Rooms/{item.RoomId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Session>> UpdateSessionAsync(xDTO.Session item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Session>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Sessions/{item.SessionId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionCategoryType>> UpdateSessionCategoryTypeAsync(xDTO.SessionCategoryType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SessionCategoryType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionCategoryTypes/{item.SessionCategoryTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionLike>> UpdateSessionLikeAsync(xDTO.SessionLike item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SessionLike>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionLikes/{item.SessionId}/{item.UserProfileId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionSessionCategoryType>> UpdateSessionSessionCategoryTypeAsync(xDTO.SessionSessionCategoryType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SessionSessionCategoryType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionSessionCategoryTypes/{item.SessionId}/{item.SessionCategoryTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SessionSpeaker>> UpdateSessionSpeakerAsync(xDTO.SessionSpeaker item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SessionSpeaker>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SessionSpeakers/{item.SessionId}/{item.UserProfileId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.Sponsor>> UpdateSponsorAsync(xDTO.Sponsor item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.Sponsor>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}Sponsors/{item.SponsorId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SponsorFeaturedEvent>> UpdateSponsorFeaturedEventAsync(xDTO.SponsorFeaturedEvent item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SponsorFeaturedEvent>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SponsorFeaturedEvents/{item.SponsorId}/{item.FeaturedEventId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.SponsorType>> UpdateSponsorTypeAsync(xDTO.SponsorType item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.SponsorType>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}SponsorTypes/{item.SponsorTypeId}", item);
				return retVal;
			}

			public async Task<IHttpCallResultCGHT<xDTO.UserProfile>> UpdateUserProfileAsync(xDTO.UserProfile item)
			{
				var retVal = await SerializationHelper.Instance.SerializeCallResultsPut<xDTO.UserProfile>(
					Log, GetClient(),
					$"{ExecutionContext.BaseWebApiUrl}UserProfiles/{item.UserProfileId}", item);
				return retVal;
			}

		#endregion Update



		#region Delete

		public async Task<IHttpCallResultCGHT<xDTO.Announcement>> DeleteAnnouncementAsync(int announcementId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Announcement>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Announcements/{announcementId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeaturedEvent>> DeleteFeaturedEventAsync(int featuredEventId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.FeaturedEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeaturedEvents/{featuredEventId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Feedback>> DeleteFeedbackAsync(System.Guid feedbackId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Feedback>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Feedbacks/{feedbackId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackInitiatorType>> DeleteFeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.FeedbackInitiatorType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackInitiatorTypes/{feedbackInitiatorTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.FeedbackType>> DeleteFeedbackTypeAsync(int feedbackTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.FeedbackType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}FeedbackTypes/{feedbackTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.GenderType>> DeleteGenderTypeAsync(int genderTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.GenderType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}GenderTypes/{genderTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LanguageType>> DeleteLanguageTypeAsync(int languageTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.LanguageType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LanguageTypes/{languageTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Log>> DeleteLogAsync(int id)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Log>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Logs/{id}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LogType>> DeleteLogTypeAsync(int id)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.LogType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LogTypes/{id}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.LookupList>> DeleteLookupListAsync(int lookupListId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.LookupList>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}LookupLists/{lookupListId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Room>> DeleteRoomAsync(int roomId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Room>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Rooms/{roomId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Session>> DeleteSessionAsync(int sessionId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Session>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Sessions/{sessionId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionCategoryType>> DeleteSessionCategoryTypeAsync(int sessionCategoryTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SessionCategoryType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionCategoryTypes/{sessionCategoryTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionLike>> DeleteSessionLikeAsync(int sessionId, int userProfileId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SessionLike>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionLikes/{sessionId}/{userProfileId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionSessionCategoryType>> DeleteSessionSessionCategoryTypeAsync(int sessionId, int sessionCategoryTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SessionSessionCategoryType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionSessionCategoryTypes/{sessionId}/{sessionCategoryTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SessionSpeaker>> DeleteSessionSpeakerAsync(int sessionId, int userProfileId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SessionSpeaker>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SessionSpeakers/{sessionId}/{userProfileId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.Sponsor>> DeleteSponsorAsync(int sponsorId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.Sponsor>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}Sponsors/{sponsorId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SponsorFeaturedEvent>> DeleteSponsorFeaturedEventAsync(int sponsorId, int featuredEventId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SponsorFeaturedEvent>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SponsorFeaturedEvents/{sponsorId}/{featuredEventId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.SponsorType>> DeleteSponsorTypeAsync(int sponsorTypeId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.SponsorType>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}SponsorTypes/{sponsorTypeId}");
			return retVal;
		}

		public async Task<IHttpCallResultCGHT<xDTO.UserProfile>> DeleteUserProfileAsync(int userProfileId)
		{
			var retVal = await SerializationHelper.Instance.SerializeCallResultsDelete<xDTO.UserProfile>(Log, GetClient(), $"{ExecutionContext.BaseWebApiUrl}UserProfiles/{userProfileId}");
			return retVal;
		}

		#endregion Delete


	}
}
