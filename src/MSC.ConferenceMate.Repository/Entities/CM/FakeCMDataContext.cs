// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.ConferenceMate.Repository.Entities.CM
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class FakeCMDataContext : ICMDataContext
    {
        public System.Data.Entity.DbSet<Announcement> Announcements { get; set; }
        public System.Data.Entity.DbSet<FeaturedEvent> FeaturedEvents { get; set; }
        public System.Data.Entity.DbSet<Feedback> Feedbacks { get; set; }
        public System.Data.Entity.DbSet<FeedbackInitiatorType> FeedbackInitiatorTypes { get; set; }
        public System.Data.Entity.DbSet<FeedbackType> FeedbackTypes { get; set; }
        public System.Data.Entity.DbSet<GenderType> GenderTypes { get; set; }
        public System.Data.Entity.DbSet<LanguageType> LanguageTypes { get; set; }
        public System.Data.Entity.DbSet<LookupList> LookupLists { get; set; }
        public System.Data.Entity.DbSet<Room> Rooms { get; set; }
        public System.Data.Entity.DbSet<Session> Sessions { get; set; }
        public System.Data.Entity.DbSet<SessionCategoryType> SessionCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<SessionLike> SessionLikes { get; set; }
        public System.Data.Entity.DbSet<SessionSessionCategoryType> SessionSessionCategoryTypes { get; set; }
        public System.Data.Entity.DbSet<SessionSpeaker> SessionSpeakers { get; set; }
        public System.Data.Entity.DbSet<Sponsor> Sponsors { get; set; }
        public System.Data.Entity.DbSet<SponsorFeaturedEvent> SponsorFeaturedEvents { get; set; }
        public System.Data.Entity.DbSet<SponsorType> SponsorTypes { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }

        public FakeCMDataContext()
        {
            Announcements = new FakeDbSet<Announcement>("AnnouncementId");
            FeaturedEvents = new FakeDbSet<FeaturedEvent>("FeaturedEventId");
            Feedbacks = new FakeDbSet<Feedback>("FeedbackId");
            FeedbackInitiatorTypes = new FakeDbSet<FeedbackInitiatorType>("FeedbackInitiatorTypeId");
            FeedbackTypes = new FakeDbSet<FeedbackType>("FeedbackTypeId");
            GenderTypes = new FakeDbSet<GenderType>("GenderTypeId");
            LanguageTypes = new FakeDbSet<LanguageType>("LanguageTypeId");
            LookupLists = new FakeDbSet<LookupList>("LookupListId");
            Rooms = new FakeDbSet<Room>("RoomId");
            Sessions = new FakeDbSet<Session>("SessionId");
            SessionCategoryTypes = new FakeDbSet<SessionCategoryType>("SessionCategoryTypeId");
            SessionLikes = new FakeDbSet<SessionLike>("SessionId", "UserId");
            SessionSessionCategoryTypes = new FakeDbSet<SessionSessionCategoryType>("SessionId", "SessionCategoryTypeId");
            SessionSpeakers = new FakeDbSet<SessionSpeaker>("SessionId", "UserId");
            Sponsors = new FakeDbSet<Sponsor>("SponsorId");
            SponsorFeaturedEvents = new FakeDbSet<SponsorFeaturedEvent>("SponsorId", "FeaturedEventId");
            SponsorTypes = new FakeDbSet<SponsorType>("SponsorTypeId");
            Users = new FakeDbSet<User>("UserId");

            InitializePartial();
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        partial void InitializePartial();

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
