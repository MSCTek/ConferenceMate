// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.ConferenceMate.Repository.Entities.CM
{

    // Feedback
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class FeedbackConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Feedback>
    {
        public FeedbackConfiguration()
            : this("dbo")
        {
        }

        public FeedbackConfiguration(string schema)
        {
            ToTable("Feedback", schema);
            HasKey(x => x.FeedbackId);

            Property(x => x.FeedbackId).HasColumnName(@"FeedbackId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(2048);
            Property(x => x.FeedbackTypeId).HasColumnName(@"FeedbackTypeId").HasColumnType("int").IsRequired();
            Property(x => x.FeedbackInitiatorTypeId).HasColumnName(@"FeedbackInitiatorTypeId").HasColumnType("int").IsRequired();
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RatingValue).HasColumnName(@"RatingValue").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Latitude).HasColumnName(@"Latitude").HasColumnType("float").IsRequired();
            Property(x => x.Longitude).HasColumnName(@"Longitude").HasColumnType("float").IsRequired();
            Property(x => x.Dispositioned).HasColumnName(@"Dispositioned").HasColumnType("bit").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsOptional();
            Property(x => x.SessionId).HasColumnName(@"SessionId").HasColumnType("int").IsOptional();
            Property(x => x.FeaturedEventId).HasColumnName(@"FeaturedEventId").HasColumnType("int").IsOptional();
            Property(x => x.IsPublic).HasColumnName(@"IsPublic").HasColumnType("bit").IsRequired();
            Property(x => x.IsChat).HasColumnName(@"IsChat").HasColumnType("bit").IsOptional();
            Property(x => x.DataVersion).HasColumnName(@"DataVersion").HasColumnType("int").IsRequired();
            Property(x => x.CreatedUtcDate).HasColumnName(@"CreatedUtcDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.ModifiedUtcDate).HasColumnName(@"ModifiedUtcDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.FeaturedEvent).WithMany(b => b.Feedbacks).HasForeignKey(c => c.FeaturedEventId).WillCascadeOnDelete(false); // FK_Feedback_FeaturedEvent
            HasOptional(a => a.Session).WithMany(b => b.Feedbacks).HasForeignKey(c => c.SessionId).WillCascadeOnDelete(false); // FK_Feedback_Session
            HasOptional(a => a.User).WithMany(b => b.Feedbacks).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_Feedback_Users
            HasRequired(a => a.FeedbackInitiatorType).WithMany(b => b.Feedbacks).HasForeignKey(c => c.FeedbackInitiatorTypeId).WillCascadeOnDelete(false); // FK_Feedback_FeedbackInitiatorType
            HasRequired(a => a.FeedbackType).WithMany(b => b.Feedbacks).HasForeignKey(c => c.FeedbackTypeId).WillCascadeOnDelete(false); // FK_Feedback_FeedbackType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
