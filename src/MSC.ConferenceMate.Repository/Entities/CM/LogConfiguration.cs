// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.ConferenceMate.Repository.Entities.CM
{

    // Log
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class LogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Log>
    {
        public LogConfiguration()
            : this("dbo")
        {
        }

        public LogConfiguration(string schema)
        {
            ToTable("Log", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired();
            Property(x => x.Thread).HasColumnName(@"Thread").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Logger).HasColumnName(@"Logger").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(255);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(4000);
            Property(x => x.Exception).HasColumnName(@"Exception").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(2000);
            Property(x => x.LogMessageTypeId).HasColumnName(@"LogMessageTypeID").HasColumnType("int").IsOptional();
            Property(x => x.MethodName).HasColumnName(@"MethodName").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.ClientIpAddress).HasColumnName(@"ClientIPAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.LogGuid).HasColumnName(@"LogGuid").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ExecutionTimeInMilliseconds).HasColumnName(@"ExecutionTimeInMilliseconds").HasColumnType("bigint").IsOptional();
            Property(x => x.HttpResponseStatusCode).HasColumnName(@"HttpResponseStatusCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(255);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
