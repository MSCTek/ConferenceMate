// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.ConferenceMate.Repository.Entities.CM
{

    // BlobFile
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class BlobFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BlobFile>
    {
        public BlobFileConfiguration()
            : this("dbo")
        {
        }

        public BlobFileConfiguration(string schema)
        {
            ToTable("BlobFile", schema);
            HasKey(x => x.BlobFileId);

            Property(x => x.BlobFileId).HasColumnName(@"BlobFileId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(255);
            Property(x => x.DiscreteMimeType).HasColumnName(@"DiscreteMimeType").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("varbinary(max)").IsOptional();
            Property(x => x.BlobUri).HasColumnName(@"BlobUri").HasColumnType("nvarchar").IsOptional().HasMaxLength(2000);
            Property(x => x.SizeInBytes).HasColumnName(@"SizeInBytes").HasColumnType("bigint").IsOptional();
            Property(x => x.ParentBlobFileId).HasColumnName(@"ParentBlobFileId").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.BlobFileTypeId).HasColumnName(@"BlobFileTypeId").HasColumnType("int").IsOptional();
            Property(x => x.RequiresResize).HasColumnName(@"RequiresResize").HasColumnType("bit").IsOptional();
            Property(x => x.ResizeComplete).HasColumnName(@"ResizeComplete").HasColumnType("bit").IsOptional();
            Property(x => x.DataVersion).HasColumnName(@"DataVersion").HasColumnType("int").IsRequired();
            Property(x => x.CreatedUtcDate).HasColumnName(@"CreatedUtcDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.ModifiedUtcDate).HasColumnName(@"ModifiedUtcDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.ModifiedBy).HasColumnName(@"ModifiedBy").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.BlobFileType).WithMany(b => b.BlobFiles).HasForeignKey(c => c.BlobFileTypeId).WillCascadeOnDelete(false); // FK_BlobFileType
            InitializePartial();
        }
        partial void InitializePartial();
    }

}
// </auto-generated>
