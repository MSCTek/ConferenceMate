// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace MSC.ConferenceMate.Repository.Entities.CM
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public partial class CMDataContext : System.Data.Entity.DbContext, ICMDataContext
    {
        public System.Data.Entity.DbSet<Announcement> Announcements { get; set; } // Announcement
        public System.Data.Entity.DbSet<FeaturedEvent> FeaturedEvents { get; set; } // FeaturedEvent
        public System.Data.Entity.DbSet<Feedback> Feedbacks { get; set; } // Feedback
        public System.Data.Entity.DbSet<FeedbackInitiatorType> FeedbackInitiatorTypes { get; set; } // FeedbackInitiatorType
        public System.Data.Entity.DbSet<FeedbackType> FeedbackTypes { get; set; } // FeedbackType
        public System.Data.Entity.DbSet<GenderType> GenderTypes { get; set; } // GenderType
        public System.Data.Entity.DbSet<LanguageType> LanguageTypes { get; set; } // LanguageType
        public System.Data.Entity.DbSet<LookupList> LookupLists { get; set; } // LookupList
        public System.Data.Entity.DbSet<Room> Rooms { get; set; } // Room
        public System.Data.Entity.DbSet<Session> Sessions { get; set; } // Session
        public System.Data.Entity.DbSet<SessionCategoryType> SessionCategoryTypes { get; set; } // SessionCategoryType
        public System.Data.Entity.DbSet<SessionLike> SessionLikes { get; set; } // Session_Like
        public System.Data.Entity.DbSet<SessionSessionCategoryType> SessionSessionCategoryTypes { get; set; } // Session_SessionCategoryType
        public System.Data.Entity.DbSet<SessionSpeaker> SessionSpeakers { get; set; } // Session_Speaker
        public System.Data.Entity.DbSet<Sponsor> Sponsors { get; set; } // Sponsor
        public System.Data.Entity.DbSet<SponsorFeaturedEvent> SponsorFeaturedEvents { get; set; } // Sponsor_FeaturedEvent
        public System.Data.Entity.DbSet<SponsorType> SponsorTypes { get; set; } // SponsorType
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users

        static CMDataContext()
        {
            System.Data.Entity.Database.SetInitializer<CMDataContext>(null);
        }

        public CMDataContext()
            : base("Name=ConferenceMateDB")
        {
            InitializePartial();
        }

        public CMDataContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();
        }

        public CMDataContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();
        }

        public CMDataContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();
        }

        public CMDataContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnnouncementConfiguration());
            modelBuilder.Configurations.Add(new FeaturedEventConfiguration());
            modelBuilder.Configurations.Add(new FeedbackConfiguration());
            modelBuilder.Configurations.Add(new FeedbackInitiatorTypeConfiguration());
            modelBuilder.Configurations.Add(new FeedbackTypeConfiguration());
            modelBuilder.Configurations.Add(new GenderTypeConfiguration());
            modelBuilder.Configurations.Add(new LanguageTypeConfiguration());
            modelBuilder.Configurations.Add(new LookupListConfiguration());
            modelBuilder.Configurations.Add(new RoomConfiguration());
            modelBuilder.Configurations.Add(new SessionConfiguration());
            modelBuilder.Configurations.Add(new SessionCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new SessionLikeConfiguration());
            modelBuilder.Configurations.Add(new SessionSessionCategoryTypeConfiguration());
            modelBuilder.Configurations.Add(new SessionSpeakerConfiguration());
            modelBuilder.Configurations.Add(new SponsorConfiguration());
            modelBuilder.Configurations.Add(new SponsorFeaturedEventConfiguration());
            modelBuilder.Configurations.Add(new SponsorTypeConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnnouncementConfiguration(schema));
            modelBuilder.Configurations.Add(new FeaturedEventConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackInitiatorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new FeedbackTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new GenderTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new LookupListConfiguration(schema));
            modelBuilder.Configurations.Add(new RoomConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionLikeConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionSessionCategoryTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SessionSpeakerConfiguration(schema));
            modelBuilder.Configurations.Add(new SponsorConfiguration(schema));
            modelBuilder.Configurations.Add(new SponsorFeaturedEventConfiguration(schema));
            modelBuilder.Configurations.Add(new SponsorTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}
// </auto-generated>
