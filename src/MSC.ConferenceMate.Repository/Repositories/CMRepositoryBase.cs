// <auto-generated> - Template:RepositoryBase, Version:1.1, Id:70230bd4-f88f-41d8-a9c6-6e40aded5c07
using System;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using MSC.ConferenceMate.Repository.Entities.CM;
using MSC.ConferenceMate.Repository.Interface;
using CodeGenHero.Repository;
using cghEnums = CodeGenHero.Repository.Enums;

namespace MSC.ConferenceMate.Repository
{
	public abstract partial class CMRepositoryBase : ICMRepositoryCrud
	{
		private ICMDataContext _ctx;

		public CMRepositoryBase(ICMDataContext ctx)
		{
			_ctx = ctx;

			// Disable lazy loading - if not, related properties are auto-loaded when
			// they are accessed for the first time, which means they'll be included when
			// we serialize (b/c the serialization process accesses those properties).

			// We don't want that, so we turn it off.  We want to eagerly load them (using Include) manually.

			ctx.Configuration.LazyLoadingEnabled = false;

			if (System.Diagnostics.Debugger.IsAttached)
			{   // Write EF queries to the output console.
				ctx.Database.Log = x => System.Diagnostics.Debug.WriteLine(x);
			}
		}

		#region Generic Operations

		private async Task<IRepositoryActionResult<TEntity>> DeleteAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				if (item == null)
				{
					return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.NotFound);
				}

				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Remove(item);
				await _ctx.SaveChangesAsync();
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Deleted);
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		public IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class
		{
			return _ctx.Set<TEntity>();
		}

		public async Task<IRepositoryActionResult<TEntity>> InsertAsync<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Add(item);
				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryInsert<TEntity>(item, result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Created);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		private async Task<IRepositoryActionResult<TEntity>> UpdateAsync<TEntity>(TEntity item, TEntity existingItem) where TEntity : class
		{
			try
			{ // only update when a record already exists for this id
				if (existingItem == null)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NotFound);
				}

				// change the original entity status to detached; otherwise, we get an error on attach as the entity is already in the dbSet
				// set original entity state to detached
				_ctx.Entry(existingItem).State = EntityState.Detached;
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Attach(item); // attach & save
				_ctx.Entry(item).State = EntityState.Modified; // set the updated entity state to modified, so it gets updated.

				var result = await _ctx.SaveChangesAsync();
				RunCustomLogicAfterEveryUpdate<TEntity>(newItem: item, oldItem: existingItem, numObjectsWritten: result);

				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.Updated);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, cghEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch (Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, cghEnums.RepositoryActionStatus.Error, ex);
			}
		}

		partial void RunCustomLogicAfterEveryInsert<T>(T item, int numObjectsWritten) where T : class;

		partial void RunCustomLogicAfterEveryUpdate<T>(T newItem, T oldItem, int numObjectsWritten) where T : class;

		#endregion Generic Operations

		#region Announcement

		public async Task<IRepositoryActionResult<Announcement>> InsertAsync(Announcement item)
		{
			var result = await InsertAsync<Announcement>(item);
			RunCustomLogicAfterInsert_Announcement(item, result);

			return result;
		}


		public IQueryable<Announcement> GetQueryable_Announcement()
		{
			return _ctx.Set<Announcement>();
		}

			public async Task<Announcement> Get_AnnouncementAsync(int announcementId, int numChildLevels)
			{
				var qryItem = GetQueryable_Announcement().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Announcement(ref qryItem, announcementId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.AnnouncementId == announcementId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Announcement(ref dbItem, announcementId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Announcement> GetFirstOrDefaultAsync(Announcement item)
			{
				return await _ctx.Announcements.Where(x => x.AnnouncementId == item.AnnouncementId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Announcement>> UpdateAsync(Announcement item)
		{
			var oldItem = await _ctx.Announcements.FirstOrDefaultAsync(x => x.AnnouncementId == item.AnnouncementId);
			var result = await UpdateAsync<Announcement>(item, oldItem);
			RunCustomLogicAfterUpdate_Announcement(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Announcement>> Delete_AnnouncementAsync(int announcementId)
			{
				return await DeleteAsync<Announcement>(_ctx.Announcements.Where(x => x.AnnouncementId == announcementId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Announcement>> DeleteAsync(Announcement item)
			{
				return await DeleteAsync<Announcement>(_ctx.Announcements.Where(x => x.AnnouncementId == item.AnnouncementId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Announcement(Announcement item, IRepositoryActionResult<Announcement> result);

		partial void RunCustomLogicAfterUpdate_Announcement(Announcement newItem, Announcement oldItem, IRepositoryActionResult<Announcement> result);

		partial void RunCustomLogicOnGetQueryableByPK_Announcement(ref IQueryable<Announcement> qryItem, int announcementId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Announcement(ref Announcement dbItem, int announcementId, int numChildLevels);



		#endregion Announcement

		#region BlobFile

		public async Task<IRepositoryActionResult<BlobFile>> InsertAsync(BlobFile item)
		{
			var result = await InsertAsync<BlobFile>(item);
			RunCustomLogicAfterInsert_BlobFile(item, result);

			return result;
		}


		public IQueryable<BlobFile> GetQueryable_BlobFile()
		{
			return _ctx.Set<BlobFile>();
		}

			public async Task<BlobFile> Get_BlobFileAsync(System.Guid blobFileId, int numChildLevels)
			{
				var qryItem = GetQueryable_BlobFile().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BlobFile(ref qryItem, blobFileId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BlobFileId == blobFileId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BlobFile(ref dbItem, blobFileId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BlobFile> GetFirstOrDefaultAsync(BlobFile item)
			{
				return await _ctx.BlobFiles.Where(x => x.BlobFileId == item.BlobFileId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BlobFile>> UpdateAsync(BlobFile item)
		{
			var oldItem = await _ctx.BlobFiles.FirstOrDefaultAsync(x => x.BlobFileId == item.BlobFileId);
			var result = await UpdateAsync<BlobFile>(item, oldItem);
			RunCustomLogicAfterUpdate_BlobFile(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BlobFile>> Delete_BlobFileAsync(System.Guid blobFileId)
			{
				return await DeleteAsync<BlobFile>(_ctx.BlobFiles.Where(x => x.BlobFileId == blobFileId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BlobFile>> DeleteAsync(BlobFile item)
			{
				return await DeleteAsync<BlobFile>(_ctx.BlobFiles.Where(x => x.BlobFileId == item.BlobFileId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BlobFile(BlobFile item, IRepositoryActionResult<BlobFile> result);

		partial void RunCustomLogicAfterUpdate_BlobFile(BlobFile newItem, BlobFile oldItem, IRepositoryActionResult<BlobFile> result);

		partial void RunCustomLogicOnGetQueryableByPK_BlobFile(ref IQueryable<BlobFile> qryItem, System.Guid blobFileId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BlobFile(ref BlobFile dbItem, System.Guid blobFileId, int numChildLevels);



		#endregion BlobFile

		#region BlobFileType

		public async Task<IRepositoryActionResult<BlobFileType>> InsertAsync(BlobFileType item)
		{
			var result = await InsertAsync<BlobFileType>(item);
			RunCustomLogicAfterInsert_BlobFileType(item, result);

			return result;
		}


		public IQueryable<BlobFileType> GetQueryable_BlobFileType()
		{
			return _ctx.Set<BlobFileType>();
		}

			public async Task<BlobFileType> Get_BlobFileTypeAsync(int blobFileTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_BlobFileType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_BlobFileType(ref qryItem, blobFileTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.BlobFileTypeId == blobFileTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_BlobFileType(ref dbItem, blobFileTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<BlobFileType> GetFirstOrDefaultAsync(BlobFileType item)
			{
				return await _ctx.BlobFileTypes.Where(x => x.BlobFileTypeId == item.BlobFileTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<BlobFileType>> UpdateAsync(BlobFileType item)
		{
			var oldItem = await _ctx.BlobFileTypes.FirstOrDefaultAsync(x => x.BlobFileTypeId == item.BlobFileTypeId);
			var result = await UpdateAsync<BlobFileType>(item, oldItem);
			RunCustomLogicAfterUpdate_BlobFileType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<BlobFileType>> Delete_BlobFileTypeAsync(int blobFileTypeId)
			{
				return await DeleteAsync<BlobFileType>(_ctx.BlobFileTypes.Where(x => x.BlobFileTypeId == blobFileTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<BlobFileType>> DeleteAsync(BlobFileType item)
			{
				return await DeleteAsync<BlobFileType>(_ctx.BlobFileTypes.Where(x => x.BlobFileTypeId == item.BlobFileTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_BlobFileType(BlobFileType item, IRepositoryActionResult<BlobFileType> result);

		partial void RunCustomLogicAfterUpdate_BlobFileType(BlobFileType newItem, BlobFileType oldItem, IRepositoryActionResult<BlobFileType> result);

		partial void RunCustomLogicOnGetQueryableByPK_BlobFileType(ref IQueryable<BlobFileType> qryItem, int blobFileTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_BlobFileType(ref BlobFileType dbItem, int blobFileTypeId, int numChildLevels);



		#endregion BlobFileType

		#region FeaturedEvent

		public async Task<IRepositoryActionResult<FeaturedEvent>> InsertAsync(FeaturedEvent item)
		{
			var result = await InsertAsync<FeaturedEvent>(item);
			RunCustomLogicAfterInsert_FeaturedEvent(item, result);

			return result;
		}


		public IQueryable<FeaturedEvent> GetQueryable_FeaturedEvent()
		{
			return _ctx.Set<FeaturedEvent>();
		}

			public async Task<FeaturedEvent> Get_FeaturedEventAsync(int featuredEventId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeaturedEvent().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeaturedEvent(ref qryItem, featuredEventId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeaturedEventId == featuredEventId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeaturedEvent(ref dbItem, featuredEventId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeaturedEvent> GetFirstOrDefaultAsync(FeaturedEvent item)
			{
				return await _ctx.FeaturedEvents.Where(x => x.FeaturedEventId == item.FeaturedEventId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeaturedEvent>> UpdateAsync(FeaturedEvent item)
		{
			var oldItem = await _ctx.FeaturedEvents.FirstOrDefaultAsync(x => x.FeaturedEventId == item.FeaturedEventId);
			var result = await UpdateAsync<FeaturedEvent>(item, oldItem);
			RunCustomLogicAfterUpdate_FeaturedEvent(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeaturedEvent>> Delete_FeaturedEventAsync(int featuredEventId)
			{
				return await DeleteAsync<FeaturedEvent>(_ctx.FeaturedEvents.Where(x => x.FeaturedEventId == featuredEventId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeaturedEvent>> DeleteAsync(FeaturedEvent item)
			{
				return await DeleteAsync<FeaturedEvent>(_ctx.FeaturedEvents.Where(x => x.FeaturedEventId == item.FeaturedEventId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeaturedEvent(FeaturedEvent item, IRepositoryActionResult<FeaturedEvent> result);

		partial void RunCustomLogicAfterUpdate_FeaturedEvent(FeaturedEvent newItem, FeaturedEvent oldItem, IRepositoryActionResult<FeaturedEvent> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeaturedEvent(ref IQueryable<FeaturedEvent> qryItem, int featuredEventId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeaturedEvent(ref FeaturedEvent dbItem, int featuredEventId, int numChildLevels);



		#endregion FeaturedEvent

		#region Feedback

		public async Task<IRepositoryActionResult<Feedback>> InsertAsync(Feedback item)
		{
			var result = await InsertAsync<Feedback>(item);
			RunCustomLogicAfterInsert_Feedback(item, result);

			return result;
		}


		public IQueryable<Feedback> GetQueryable_Feedback()
		{
			return _ctx.Set<Feedback>();
		}

			public async Task<Feedback> Get_FeedbackAsync(System.Guid feedbackId, int numChildLevels)
			{
				var qryItem = GetQueryable_Feedback().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Feedback(ref qryItem, feedbackId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackId == feedbackId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Feedback(ref dbItem, feedbackId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Feedback> GetFirstOrDefaultAsync(Feedback item)
			{
				return await _ctx.Feedbacks.Where(x => x.FeedbackId == item.FeedbackId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Feedback>> UpdateAsync(Feedback item)
		{
			var oldItem = await _ctx.Feedbacks.FirstOrDefaultAsync(x => x.FeedbackId == item.FeedbackId);
			var result = await UpdateAsync<Feedback>(item, oldItem);
			RunCustomLogicAfterUpdate_Feedback(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Feedback>> Delete_FeedbackAsync(System.Guid feedbackId)
			{
				return await DeleteAsync<Feedback>(_ctx.Feedbacks.Where(x => x.FeedbackId == feedbackId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Feedback>> DeleteAsync(Feedback item)
			{
				return await DeleteAsync<Feedback>(_ctx.Feedbacks.Where(x => x.FeedbackId == item.FeedbackId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Feedback(Feedback item, IRepositoryActionResult<Feedback> result);

		partial void RunCustomLogicAfterUpdate_Feedback(Feedback newItem, Feedback oldItem, IRepositoryActionResult<Feedback> result);

		partial void RunCustomLogicOnGetQueryableByPK_Feedback(ref IQueryable<Feedback> qryItem, System.Guid feedbackId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Feedback(ref Feedback dbItem, System.Guid feedbackId, int numChildLevels);



		#endregion Feedback

		#region FeedbackInitiatorType

		public async Task<IRepositoryActionResult<FeedbackInitiatorType>> InsertAsync(FeedbackInitiatorType item)
		{
			var result = await InsertAsync<FeedbackInitiatorType>(item);
			RunCustomLogicAfterInsert_FeedbackInitiatorType(item, result);

			return result;
		}


		public IQueryable<FeedbackInitiatorType> GetQueryable_FeedbackInitiatorType()
		{
			return _ctx.Set<FeedbackInitiatorType>();
		}

			public async Task<FeedbackInitiatorType> Get_FeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackInitiatorType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorType(ref qryItem, feedbackInitiatorTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackInitiatorTypeId == feedbackInitiatorTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackInitiatorType(ref dbItem, feedbackInitiatorTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackInitiatorType> GetFirstOrDefaultAsync(FeedbackInitiatorType item)
			{
				return await _ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackInitiatorType>> UpdateAsync(FeedbackInitiatorType item)
		{
			var oldItem = await _ctx.FeedbackInitiatorTypes.FirstOrDefaultAsync(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId);
			var result = await UpdateAsync<FeedbackInitiatorType>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackInitiatorType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackInitiatorType>> Delete_FeedbackInitiatorTypeAsync(int feedbackInitiatorTypeId)
			{
				return await DeleteAsync<FeedbackInitiatorType>(_ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == feedbackInitiatorTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackInitiatorType>> DeleteAsync(FeedbackInitiatorType item)
			{
				return await DeleteAsync<FeedbackInitiatorType>(_ctx.FeedbackInitiatorTypes.Where(x => x.FeedbackInitiatorTypeId == item.FeedbackInitiatorTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackInitiatorType(FeedbackInitiatorType item, IRepositoryActionResult<FeedbackInitiatorType> result);

		partial void RunCustomLogicAfterUpdate_FeedbackInitiatorType(FeedbackInitiatorType newItem, FeedbackInitiatorType oldItem, IRepositoryActionResult<FeedbackInitiatorType> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorType(ref IQueryable<FeedbackInitiatorType> qryItem, int feedbackInitiatorTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackInitiatorType(ref FeedbackInitiatorType dbItem, int feedbackInitiatorTypeId, int numChildLevels);



		#endregion FeedbackInitiatorType

		#region FeedbackType

		public async Task<IRepositoryActionResult<FeedbackType>> InsertAsync(FeedbackType item)
		{
			var result = await InsertAsync<FeedbackType>(item);
			RunCustomLogicAfterInsert_FeedbackType(item, result);

			return result;
		}


		public IQueryable<FeedbackType> GetQueryable_FeedbackType()
		{
			return _ctx.Set<FeedbackType>();
		}

			public async Task<FeedbackType> Get_FeedbackTypeAsync(int feedbackTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_FeedbackType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_FeedbackType(ref qryItem, feedbackTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.FeedbackTypeId == feedbackTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_FeedbackType(ref dbItem, feedbackTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<FeedbackType> GetFirstOrDefaultAsync(FeedbackType item)
			{
				return await _ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == item.FeedbackTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<FeedbackType>> UpdateAsync(FeedbackType item)
		{
			var oldItem = await _ctx.FeedbackTypes.FirstOrDefaultAsync(x => x.FeedbackTypeId == item.FeedbackTypeId);
			var result = await UpdateAsync<FeedbackType>(item, oldItem);
			RunCustomLogicAfterUpdate_FeedbackType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<FeedbackType>> Delete_FeedbackTypeAsync(int feedbackTypeId)
			{
				return await DeleteAsync<FeedbackType>(_ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == feedbackTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<FeedbackType>> DeleteAsync(FeedbackType item)
			{
				return await DeleteAsync<FeedbackType>(_ctx.FeedbackTypes.Where(x => x.FeedbackTypeId == item.FeedbackTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_FeedbackType(FeedbackType item, IRepositoryActionResult<FeedbackType> result);

		partial void RunCustomLogicAfterUpdate_FeedbackType(FeedbackType newItem, FeedbackType oldItem, IRepositoryActionResult<FeedbackType> result);

		partial void RunCustomLogicOnGetQueryableByPK_FeedbackType(ref IQueryable<FeedbackType> qryItem, int feedbackTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_FeedbackType(ref FeedbackType dbItem, int feedbackTypeId, int numChildLevels);



		#endregion FeedbackType

		#region GenderType

		public async Task<IRepositoryActionResult<GenderType>> InsertAsync(GenderType item)
		{
			var result = await InsertAsync<GenderType>(item);
			RunCustomLogicAfterInsert_GenderType(item, result);

			return result;
		}


		public IQueryable<GenderType> GetQueryable_GenderType()
		{
			return _ctx.Set<GenderType>();
		}

			public async Task<GenderType> Get_GenderTypeAsync(int genderTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_GenderType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_GenderType(ref qryItem, genderTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.GenderTypeId == genderTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_GenderType(ref dbItem, genderTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<GenderType> GetFirstOrDefaultAsync(GenderType item)
			{
				return await _ctx.GenderTypes.Where(x => x.GenderTypeId == item.GenderTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<GenderType>> UpdateAsync(GenderType item)
		{
			var oldItem = await _ctx.GenderTypes.FirstOrDefaultAsync(x => x.GenderTypeId == item.GenderTypeId);
			var result = await UpdateAsync<GenderType>(item, oldItem);
			RunCustomLogicAfterUpdate_GenderType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<GenderType>> Delete_GenderTypeAsync(int genderTypeId)
			{
				return await DeleteAsync<GenderType>(_ctx.GenderTypes.Where(x => x.GenderTypeId == genderTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<GenderType>> DeleteAsync(GenderType item)
			{
				return await DeleteAsync<GenderType>(_ctx.GenderTypes.Where(x => x.GenderTypeId == item.GenderTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_GenderType(GenderType item, IRepositoryActionResult<GenderType> result);

		partial void RunCustomLogicAfterUpdate_GenderType(GenderType newItem, GenderType oldItem, IRepositoryActionResult<GenderType> result);

		partial void RunCustomLogicOnGetQueryableByPK_GenderType(ref IQueryable<GenderType> qryItem, int genderTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_GenderType(ref GenderType dbItem, int genderTypeId, int numChildLevels);



		#endregion GenderType

		#region LanguageType

		public async Task<IRepositoryActionResult<LanguageType>> InsertAsync(LanguageType item)
		{
			var result = await InsertAsync<LanguageType>(item);
			RunCustomLogicAfterInsert_LanguageType(item, result);

			return result;
		}


		public IQueryable<LanguageType> GetQueryable_LanguageType()
		{
			return _ctx.Set<LanguageType>();
		}

			public async Task<LanguageType> Get_LanguageTypeAsync(int languageTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_LanguageType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LanguageType(ref qryItem, languageTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LanguageTypeId == languageTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LanguageType(ref dbItem, languageTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LanguageType> GetFirstOrDefaultAsync(LanguageType item)
			{
				return await _ctx.LanguageTypes.Where(x => x.LanguageTypeId == item.LanguageTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LanguageType>> UpdateAsync(LanguageType item)
		{
			var oldItem = await _ctx.LanguageTypes.FirstOrDefaultAsync(x => x.LanguageTypeId == item.LanguageTypeId);
			var result = await UpdateAsync<LanguageType>(item, oldItem);
			RunCustomLogicAfterUpdate_LanguageType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LanguageType>> Delete_LanguageTypeAsync(int languageTypeId)
			{
				return await DeleteAsync<LanguageType>(_ctx.LanguageTypes.Where(x => x.LanguageTypeId == languageTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LanguageType>> DeleteAsync(LanguageType item)
			{
				return await DeleteAsync<LanguageType>(_ctx.LanguageTypes.Where(x => x.LanguageTypeId == item.LanguageTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LanguageType(LanguageType item, IRepositoryActionResult<LanguageType> result);

		partial void RunCustomLogicAfterUpdate_LanguageType(LanguageType newItem, LanguageType oldItem, IRepositoryActionResult<LanguageType> result);

		partial void RunCustomLogicOnGetQueryableByPK_LanguageType(ref IQueryable<LanguageType> qryItem, int languageTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LanguageType(ref LanguageType dbItem, int languageTypeId, int numChildLevels);



		#endregion LanguageType

		#region Log

		public async Task<IRepositoryActionResult<Log>> InsertAsync(Log item)
		{
			var result = await InsertAsync<Log>(item);
			RunCustomLogicAfterInsert_Log(item, result);

			return result;
		}


		public IQueryable<Log> GetQueryable_Log()
		{
			return _ctx.Set<Log>();
		}

			public async Task<Log> Get_LogAsync(int id, int numChildLevels)
			{
				var qryItem = GetQueryable_Log().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Log(ref qryItem, id, numChildLevels);

				var dbItem = await qryItem.Where(x => x.Id == id).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Log(ref dbItem, id, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Log> GetFirstOrDefaultAsync(Log item)
			{
				return await _ctx.Logs.Where(x => x.Id == item.Id).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Log>> UpdateAsync(Log item)
		{
			var oldItem = await _ctx.Logs.FirstOrDefaultAsync(x => x.Id == item.Id);
			var result = await UpdateAsync<Log>(item, oldItem);
			RunCustomLogicAfterUpdate_Log(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Log>> Delete_LogAsync(int id)
			{
				return await DeleteAsync<Log>(_ctx.Logs.Where(x => x.Id == id).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Log>> DeleteAsync(Log item)
			{
				return await DeleteAsync<Log>(_ctx.Logs.Where(x => x.Id == item.Id).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Log(Log item, IRepositoryActionResult<Log> result);

		partial void RunCustomLogicAfterUpdate_Log(Log newItem, Log oldItem, IRepositoryActionResult<Log> result);

		partial void RunCustomLogicOnGetQueryableByPK_Log(ref IQueryable<Log> qryItem, int id, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Log(ref Log dbItem, int id, int numChildLevels);



		#endregion Log

		#region LogType

		public async Task<IRepositoryActionResult<LogType>> InsertAsync(LogType item)
		{
			var result = await InsertAsync<LogType>(item);
			RunCustomLogicAfterInsert_LogType(item, result);

			return result;
		}


		public IQueryable<LogType> GetQueryable_LogType()
		{
			return _ctx.Set<LogType>();
		}

			public async Task<LogType> Get_LogTypeAsync(int id, int numChildLevels)
			{
				var qryItem = GetQueryable_LogType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LogType(ref qryItem, id, numChildLevels);

				var dbItem = await qryItem.Where(x => x.Id == id).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LogType(ref dbItem, id, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LogType> GetFirstOrDefaultAsync(LogType item)
			{
				return await _ctx.LogTypes.Where(x => x.Id == item.Id).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LogType>> UpdateAsync(LogType item)
		{
			var oldItem = await _ctx.LogTypes.FirstOrDefaultAsync(x => x.Id == item.Id);
			var result = await UpdateAsync<LogType>(item, oldItem);
			RunCustomLogicAfterUpdate_LogType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LogType>> Delete_LogTypeAsync(int id)
			{
				return await DeleteAsync<LogType>(_ctx.LogTypes.Where(x => x.Id == id).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LogType>> DeleteAsync(LogType item)
			{
				return await DeleteAsync<LogType>(_ctx.LogTypes.Where(x => x.Id == item.Id).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LogType(LogType item, IRepositoryActionResult<LogType> result);

		partial void RunCustomLogicAfterUpdate_LogType(LogType newItem, LogType oldItem, IRepositoryActionResult<LogType> result);

		partial void RunCustomLogicOnGetQueryableByPK_LogType(ref IQueryable<LogType> qryItem, int id, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LogType(ref LogType dbItem, int id, int numChildLevels);



		#endregion LogType

		#region LookupList

		public async Task<IRepositoryActionResult<LookupList>> InsertAsync(LookupList item)
		{
			var result = await InsertAsync<LookupList>(item);
			RunCustomLogicAfterInsert_LookupList(item, result);

			return result;
		}


		public IQueryable<LookupList> GetQueryable_LookupList()
		{
			return _ctx.Set<LookupList>();
		}

			public async Task<LookupList> Get_LookupListAsync(int lookupListId, int numChildLevels)
			{
				var qryItem = GetQueryable_LookupList().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_LookupList(ref qryItem, lookupListId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.LookupListId == lookupListId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_LookupList(ref dbItem, lookupListId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<LookupList> GetFirstOrDefaultAsync(LookupList item)
			{
				return await _ctx.LookupLists.Where(x => x.LookupListId == item.LookupListId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<LookupList>> UpdateAsync(LookupList item)
		{
			var oldItem = await _ctx.LookupLists.FirstOrDefaultAsync(x => x.LookupListId == item.LookupListId);
			var result = await UpdateAsync<LookupList>(item, oldItem);
			RunCustomLogicAfterUpdate_LookupList(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<LookupList>> Delete_LookupListAsync(int lookupListId)
			{
				return await DeleteAsync<LookupList>(_ctx.LookupLists.Where(x => x.LookupListId == lookupListId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<LookupList>> DeleteAsync(LookupList item)
			{
				return await DeleteAsync<LookupList>(_ctx.LookupLists.Where(x => x.LookupListId == item.LookupListId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_LookupList(LookupList item, IRepositoryActionResult<LookupList> result);

		partial void RunCustomLogicAfterUpdate_LookupList(LookupList newItem, LookupList oldItem, IRepositoryActionResult<LookupList> result);

		partial void RunCustomLogicOnGetQueryableByPK_LookupList(ref IQueryable<LookupList> qryItem, int lookupListId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_LookupList(ref LookupList dbItem, int lookupListId, int numChildLevels);



		#endregion LookupList

		#region Room

		public async Task<IRepositoryActionResult<Room>> InsertAsync(Room item)
		{
			var result = await InsertAsync<Room>(item);
			RunCustomLogicAfterInsert_Room(item, result);

			return result;
		}


		public IQueryable<Room> GetQueryable_Room()
		{
			return _ctx.Set<Room>();
		}

			public async Task<Room> Get_RoomAsync(int roomId, int numChildLevels)
			{
				var qryItem = GetQueryable_Room().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Room(ref qryItem, roomId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.RoomId == roomId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Room(ref dbItem, roomId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Room> GetFirstOrDefaultAsync(Room item)
			{
				return await _ctx.Rooms.Where(x => x.RoomId == item.RoomId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Room>> UpdateAsync(Room item)
		{
			var oldItem = await _ctx.Rooms.FirstOrDefaultAsync(x => x.RoomId == item.RoomId);
			var result = await UpdateAsync<Room>(item, oldItem);
			RunCustomLogicAfterUpdate_Room(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Room>> Delete_RoomAsync(int roomId)
			{
				return await DeleteAsync<Room>(_ctx.Rooms.Where(x => x.RoomId == roomId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Room>> DeleteAsync(Room item)
			{
				return await DeleteAsync<Room>(_ctx.Rooms.Where(x => x.RoomId == item.RoomId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Room(Room item, IRepositoryActionResult<Room> result);

		partial void RunCustomLogicAfterUpdate_Room(Room newItem, Room oldItem, IRepositoryActionResult<Room> result);

		partial void RunCustomLogicOnGetQueryableByPK_Room(ref IQueryable<Room> qryItem, int roomId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Room(ref Room dbItem, int roomId, int numChildLevels);



		#endregion Room

		#region Session

		public async Task<IRepositoryActionResult<Session>> InsertAsync(Session item)
		{
			var result = await InsertAsync<Session>(item);
			RunCustomLogicAfterInsert_Session(item, result);

			return result;
		}


		public IQueryable<Session> GetQueryable_Session()
		{
			return _ctx.Set<Session>();
		}

			public async Task<Session> Get_SessionAsync(int sessionId, int numChildLevels)
			{
				var qryItem = GetQueryable_Session().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Session(ref qryItem, sessionId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.SessionId == sessionId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Session(ref dbItem, sessionId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Session> GetFirstOrDefaultAsync(Session item)
			{
				return await _ctx.Sessions.Where(x => x.SessionId == item.SessionId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Session>> UpdateAsync(Session item)
		{
			var oldItem = await _ctx.Sessions.FirstOrDefaultAsync(x => x.SessionId == item.SessionId);
			var result = await UpdateAsync<Session>(item, oldItem);
			RunCustomLogicAfterUpdate_Session(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Session>> Delete_SessionAsync(int sessionId)
			{
				return await DeleteAsync<Session>(_ctx.Sessions.Where(x => x.SessionId == sessionId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Session>> DeleteAsync(Session item)
			{
				return await DeleteAsync<Session>(_ctx.Sessions.Where(x => x.SessionId == item.SessionId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Session(Session item, IRepositoryActionResult<Session> result);

		partial void RunCustomLogicAfterUpdate_Session(Session newItem, Session oldItem, IRepositoryActionResult<Session> result);

		partial void RunCustomLogicOnGetQueryableByPK_Session(ref IQueryable<Session> qryItem, int sessionId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Session(ref Session dbItem, int sessionId, int numChildLevels);



		#endregion Session

		#region SessionCategoryType

		public async Task<IRepositoryActionResult<SessionCategoryType>> InsertAsync(SessionCategoryType item)
		{
			var result = await InsertAsync<SessionCategoryType>(item);
			RunCustomLogicAfterInsert_SessionCategoryType(item, result);

			return result;
		}


		public IQueryable<SessionCategoryType> GetQueryable_SessionCategoryType()
		{
			return _ctx.Set<SessionCategoryType>();
		}

			public async Task<SessionCategoryType> Get_SessionCategoryTypeAsync(int sessionCategoryTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_SessionCategoryType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SessionCategoryType(ref qryItem, sessionCategoryTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.SessionCategoryTypeId == sessionCategoryTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SessionCategoryType(ref dbItem, sessionCategoryTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SessionCategoryType> GetFirstOrDefaultAsync(SessionCategoryType item)
			{
				return await _ctx.SessionCategoryTypes.Where(x => x.SessionCategoryTypeId == item.SessionCategoryTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SessionCategoryType>> UpdateAsync(SessionCategoryType item)
		{
			var oldItem = await _ctx.SessionCategoryTypes.FirstOrDefaultAsync(x => x.SessionCategoryTypeId == item.SessionCategoryTypeId);
			var result = await UpdateAsync<SessionCategoryType>(item, oldItem);
			RunCustomLogicAfterUpdate_SessionCategoryType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SessionCategoryType>> Delete_SessionCategoryTypeAsync(int sessionCategoryTypeId)
			{
				return await DeleteAsync<SessionCategoryType>(_ctx.SessionCategoryTypes.Where(x => x.SessionCategoryTypeId == sessionCategoryTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SessionCategoryType>> DeleteAsync(SessionCategoryType item)
			{
				return await DeleteAsync<SessionCategoryType>(_ctx.SessionCategoryTypes.Where(x => x.SessionCategoryTypeId == item.SessionCategoryTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SessionCategoryType(SessionCategoryType item, IRepositoryActionResult<SessionCategoryType> result);

		partial void RunCustomLogicAfterUpdate_SessionCategoryType(SessionCategoryType newItem, SessionCategoryType oldItem, IRepositoryActionResult<SessionCategoryType> result);

		partial void RunCustomLogicOnGetQueryableByPK_SessionCategoryType(ref IQueryable<SessionCategoryType> qryItem, int sessionCategoryTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SessionCategoryType(ref SessionCategoryType dbItem, int sessionCategoryTypeId, int numChildLevels);



		#endregion SessionCategoryType

		#region SessionLike

		public async Task<IRepositoryActionResult<SessionLike>> InsertAsync(SessionLike item)
		{
			var result = await InsertAsync<SessionLike>(item);
			RunCustomLogicAfterInsert_SessionLike(item, result);

			return result;
		}


		public IQueryable<SessionLike> GetQueryable_SessionLike()
		{
			return _ctx.Set<SessionLike>();
		}

			public async Task<SessionLike> Get_SessionLikeAsync(int sessionId, int userProfileId, int numChildLevels)
			{
				var qryItem = GetQueryable_SessionLike().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SessionLike(ref qryItem, sessionId, userProfileId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.SessionId == sessionId
						&& x.UserProfileId == userProfileId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SessionLike(ref dbItem, sessionId, userProfileId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SessionLike> GetFirstOrDefaultAsync(SessionLike item)
			{
				return await _ctx.SessionLikes.Where(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SessionLike>> UpdateAsync(SessionLike item)
		{
			var oldItem = await _ctx.SessionLikes.FirstOrDefaultAsync(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId);
			var result = await UpdateAsync<SessionLike>(item, oldItem);
			RunCustomLogicAfterUpdate_SessionLike(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SessionLike>> Delete_SessionLikeAsync(int sessionId, int userProfileId)
			{
				return await DeleteAsync<SessionLike>(_ctx.SessionLikes.Where(
						x => x.SessionId == sessionId
						&& x.UserProfileId == userProfileId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SessionLike>> DeleteAsync(SessionLike item)
			{
				return await DeleteAsync<SessionLike>(_ctx.SessionLikes.Where(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SessionLike(SessionLike item, IRepositoryActionResult<SessionLike> result);

		partial void RunCustomLogicAfterUpdate_SessionLike(SessionLike newItem, SessionLike oldItem, IRepositoryActionResult<SessionLike> result);

		partial void RunCustomLogicOnGetQueryableByPK_SessionLike(ref IQueryable<SessionLike> qryItem, int sessionId, int userProfileId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SessionLike(ref SessionLike dbItem, int sessionId, int userProfileId, int numChildLevels);



		#endregion SessionLike

		#region SessionSessionCategoryType

		public async Task<IRepositoryActionResult<SessionSessionCategoryType>> InsertAsync(SessionSessionCategoryType item)
		{
			var result = await InsertAsync<SessionSessionCategoryType>(item);
			RunCustomLogicAfterInsert_SessionSessionCategoryType(item, result);

			return result;
		}


		public IQueryable<SessionSessionCategoryType> GetQueryable_SessionSessionCategoryType()
		{
			return _ctx.Set<SessionSessionCategoryType>();
		}

			public async Task<SessionSessionCategoryType> Get_SessionSessionCategoryTypeAsync(int sessionId, int sessionCategoryTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_SessionSessionCategoryType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SessionSessionCategoryType(ref qryItem, sessionId, sessionCategoryTypeId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.SessionId == sessionId
						&& x.SessionCategoryTypeId == sessionCategoryTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SessionSessionCategoryType(ref dbItem, sessionId, sessionCategoryTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SessionSessionCategoryType> GetFirstOrDefaultAsync(SessionSessionCategoryType item)
			{
				return await _ctx.SessionSessionCategoryTypes.Where(
						x => x.SessionId == item.SessionId
						&& x.SessionCategoryTypeId == item.SessionCategoryTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SessionSessionCategoryType>> UpdateAsync(SessionSessionCategoryType item)
		{
			var oldItem = await _ctx.SessionSessionCategoryTypes.FirstOrDefaultAsync(
						x => x.SessionId == item.SessionId
						&& x.SessionCategoryTypeId == item.SessionCategoryTypeId);
			var result = await UpdateAsync<SessionSessionCategoryType>(item, oldItem);
			RunCustomLogicAfterUpdate_SessionSessionCategoryType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SessionSessionCategoryType>> Delete_SessionSessionCategoryTypeAsync(int sessionId, int sessionCategoryTypeId)
			{
				return await DeleteAsync<SessionSessionCategoryType>(_ctx.SessionSessionCategoryTypes.Where(
						x => x.SessionId == sessionId
						&& x.SessionCategoryTypeId == sessionCategoryTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SessionSessionCategoryType>> DeleteAsync(SessionSessionCategoryType item)
			{
				return await DeleteAsync<SessionSessionCategoryType>(_ctx.SessionSessionCategoryTypes.Where(
						x => x.SessionId == item.SessionId
						&& x.SessionCategoryTypeId == item.SessionCategoryTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SessionSessionCategoryType(SessionSessionCategoryType item, IRepositoryActionResult<SessionSessionCategoryType> result);

		partial void RunCustomLogicAfterUpdate_SessionSessionCategoryType(SessionSessionCategoryType newItem, SessionSessionCategoryType oldItem, IRepositoryActionResult<SessionSessionCategoryType> result);

		partial void RunCustomLogicOnGetQueryableByPK_SessionSessionCategoryType(ref IQueryable<SessionSessionCategoryType> qryItem, int sessionId, int sessionCategoryTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SessionSessionCategoryType(ref SessionSessionCategoryType dbItem, int sessionId, int sessionCategoryTypeId, int numChildLevels);



		#endregion SessionSessionCategoryType

		#region SessionSpeaker

		public async Task<IRepositoryActionResult<SessionSpeaker>> InsertAsync(SessionSpeaker item)
		{
			var result = await InsertAsync<SessionSpeaker>(item);
			RunCustomLogicAfterInsert_SessionSpeaker(item, result);

			return result;
		}


		public IQueryable<SessionSpeaker> GetQueryable_SessionSpeaker()
		{
			return _ctx.Set<SessionSpeaker>();
		}

			public async Task<SessionSpeaker> Get_SessionSpeakerAsync(int sessionId, int userProfileId, int numChildLevels)
			{
				var qryItem = GetQueryable_SessionSpeaker().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SessionSpeaker(ref qryItem, sessionId, userProfileId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.SessionId == sessionId
						&& x.UserProfileId == userProfileId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SessionSpeaker(ref dbItem, sessionId, userProfileId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SessionSpeaker> GetFirstOrDefaultAsync(SessionSpeaker item)
			{
				return await _ctx.SessionSpeakers.Where(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SessionSpeaker>> UpdateAsync(SessionSpeaker item)
		{
			var oldItem = await _ctx.SessionSpeakers.FirstOrDefaultAsync(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId);
			var result = await UpdateAsync<SessionSpeaker>(item, oldItem);
			RunCustomLogicAfterUpdate_SessionSpeaker(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SessionSpeaker>> Delete_SessionSpeakerAsync(int sessionId, int userProfileId)
			{
				return await DeleteAsync<SessionSpeaker>(_ctx.SessionSpeakers.Where(
						x => x.SessionId == sessionId
						&& x.UserProfileId == userProfileId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SessionSpeaker>> DeleteAsync(SessionSpeaker item)
			{
				return await DeleteAsync<SessionSpeaker>(_ctx.SessionSpeakers.Where(
						x => x.SessionId == item.SessionId
						&& x.UserProfileId == item.UserProfileId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SessionSpeaker(SessionSpeaker item, IRepositoryActionResult<SessionSpeaker> result);

		partial void RunCustomLogicAfterUpdate_SessionSpeaker(SessionSpeaker newItem, SessionSpeaker oldItem, IRepositoryActionResult<SessionSpeaker> result);

		partial void RunCustomLogicOnGetQueryableByPK_SessionSpeaker(ref IQueryable<SessionSpeaker> qryItem, int sessionId, int userProfileId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SessionSpeaker(ref SessionSpeaker dbItem, int sessionId, int userProfileId, int numChildLevels);



		#endregion SessionSpeaker

		#region Sponsor

		public async Task<IRepositoryActionResult<Sponsor>> InsertAsync(Sponsor item)
		{
			var result = await InsertAsync<Sponsor>(item);
			RunCustomLogicAfterInsert_Sponsor(item, result);

			return result;
		}


		public IQueryable<Sponsor> GetQueryable_Sponsor()
		{
			return _ctx.Set<Sponsor>();
		}

			public async Task<Sponsor> Get_SponsorAsync(int sponsorId, int numChildLevels)
			{
				var qryItem = GetQueryable_Sponsor().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_Sponsor(ref qryItem, sponsorId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.SponsorId == sponsorId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_Sponsor(ref dbItem, sponsorId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<Sponsor> GetFirstOrDefaultAsync(Sponsor item)
			{
				return await _ctx.Sponsors.Where(x => x.SponsorId == item.SponsorId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<Sponsor>> UpdateAsync(Sponsor item)
		{
			var oldItem = await _ctx.Sponsors.FirstOrDefaultAsync(x => x.SponsorId == item.SponsorId);
			var result = await UpdateAsync<Sponsor>(item, oldItem);
			RunCustomLogicAfterUpdate_Sponsor(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<Sponsor>> Delete_SponsorAsync(int sponsorId)
			{
				return await DeleteAsync<Sponsor>(_ctx.Sponsors.Where(x => x.SponsorId == sponsorId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<Sponsor>> DeleteAsync(Sponsor item)
			{
				return await DeleteAsync<Sponsor>(_ctx.Sponsors.Where(x => x.SponsorId == item.SponsorId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_Sponsor(Sponsor item, IRepositoryActionResult<Sponsor> result);

		partial void RunCustomLogicAfterUpdate_Sponsor(Sponsor newItem, Sponsor oldItem, IRepositoryActionResult<Sponsor> result);

		partial void RunCustomLogicOnGetQueryableByPK_Sponsor(ref IQueryable<Sponsor> qryItem, int sponsorId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_Sponsor(ref Sponsor dbItem, int sponsorId, int numChildLevels);



		#endregion Sponsor

		#region SponsorFeaturedEvent

		public async Task<IRepositoryActionResult<SponsorFeaturedEvent>> InsertAsync(SponsorFeaturedEvent item)
		{
			var result = await InsertAsync<SponsorFeaturedEvent>(item);
			RunCustomLogicAfterInsert_SponsorFeaturedEvent(item, result);

			return result;
		}


		public IQueryable<SponsorFeaturedEvent> GetQueryable_SponsorFeaturedEvent()
		{
			return _ctx.Set<SponsorFeaturedEvent>();
		}

			public async Task<SponsorFeaturedEvent> Get_SponsorFeaturedEventAsync(int sponsorId, int featuredEventId, int numChildLevels)
			{
				var qryItem = GetQueryable_SponsorFeaturedEvent().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SponsorFeaturedEvent(ref qryItem, sponsorId, featuredEventId, numChildLevels);

				var dbItem = await qryItem.Where(
						x => x.SponsorId == sponsorId
						&& x.FeaturedEventId == featuredEventId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SponsorFeaturedEvent(ref dbItem, sponsorId, featuredEventId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SponsorFeaturedEvent> GetFirstOrDefaultAsync(SponsorFeaturedEvent item)
			{
				return await _ctx.SponsorFeaturedEvents.Where(
						x => x.SponsorId == item.SponsorId
						&& x.FeaturedEventId == item.FeaturedEventId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SponsorFeaturedEvent>> UpdateAsync(SponsorFeaturedEvent item)
		{
			var oldItem = await _ctx.SponsorFeaturedEvents.FirstOrDefaultAsync(
						x => x.SponsorId == item.SponsorId
						&& x.FeaturedEventId == item.FeaturedEventId);
			var result = await UpdateAsync<SponsorFeaturedEvent>(item, oldItem);
			RunCustomLogicAfterUpdate_SponsorFeaturedEvent(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SponsorFeaturedEvent>> Delete_SponsorFeaturedEventAsync(int sponsorId, int featuredEventId)
			{
				return await DeleteAsync<SponsorFeaturedEvent>(_ctx.SponsorFeaturedEvents.Where(
						x => x.SponsorId == sponsorId
						&& x.FeaturedEventId == featuredEventId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SponsorFeaturedEvent>> DeleteAsync(SponsorFeaturedEvent item)
			{
				return await DeleteAsync<SponsorFeaturedEvent>(_ctx.SponsorFeaturedEvents.Where(
						x => x.SponsorId == item.SponsorId
						&& x.FeaturedEventId == item.FeaturedEventId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SponsorFeaturedEvent(SponsorFeaturedEvent item, IRepositoryActionResult<SponsorFeaturedEvent> result);

		partial void RunCustomLogicAfterUpdate_SponsorFeaturedEvent(SponsorFeaturedEvent newItem, SponsorFeaturedEvent oldItem, IRepositoryActionResult<SponsorFeaturedEvent> result);

		partial void RunCustomLogicOnGetQueryableByPK_SponsorFeaturedEvent(ref IQueryable<SponsorFeaturedEvent> qryItem, int sponsorId, int featuredEventId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SponsorFeaturedEvent(ref SponsorFeaturedEvent dbItem, int sponsorId, int featuredEventId, int numChildLevels);



		#endregion SponsorFeaturedEvent

		#region SponsorType

		public async Task<IRepositoryActionResult<SponsorType>> InsertAsync(SponsorType item)
		{
			var result = await InsertAsync<SponsorType>(item);
			RunCustomLogicAfterInsert_SponsorType(item, result);

			return result;
		}


		public IQueryable<SponsorType> GetQueryable_SponsorType()
		{
			return _ctx.Set<SponsorType>();
		}

			public async Task<SponsorType> Get_SponsorTypeAsync(int sponsorTypeId, int numChildLevels)
			{
				var qryItem = GetQueryable_SponsorType().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_SponsorType(ref qryItem, sponsorTypeId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.SponsorTypeId == sponsorTypeId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_SponsorType(ref dbItem, sponsorTypeId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<SponsorType> GetFirstOrDefaultAsync(SponsorType item)
			{
				return await _ctx.SponsorTypes.Where(x => x.SponsorTypeId == item.SponsorTypeId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<SponsorType>> UpdateAsync(SponsorType item)
		{
			var oldItem = await _ctx.SponsorTypes.FirstOrDefaultAsync(x => x.SponsorTypeId == item.SponsorTypeId);
			var result = await UpdateAsync<SponsorType>(item, oldItem);
			RunCustomLogicAfterUpdate_SponsorType(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<SponsorType>> Delete_SponsorTypeAsync(int sponsorTypeId)
			{
				return await DeleteAsync<SponsorType>(_ctx.SponsorTypes.Where(x => x.SponsorTypeId == sponsorTypeId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<SponsorType>> DeleteAsync(SponsorType item)
			{
				return await DeleteAsync<SponsorType>(_ctx.SponsorTypes.Where(x => x.SponsorTypeId == item.SponsorTypeId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_SponsorType(SponsorType item, IRepositoryActionResult<SponsorType> result);

		partial void RunCustomLogicAfterUpdate_SponsorType(SponsorType newItem, SponsorType oldItem, IRepositoryActionResult<SponsorType> result);

		partial void RunCustomLogicOnGetQueryableByPK_SponsorType(ref IQueryable<SponsorType> qryItem, int sponsorTypeId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_SponsorType(ref SponsorType dbItem, int sponsorTypeId, int numChildLevels);



		#endregion SponsorType

		#region UserProfile

		public async Task<IRepositoryActionResult<UserProfile>> InsertAsync(UserProfile item)
		{
			var result = await InsertAsync<UserProfile>(item);
			RunCustomLogicAfterInsert_UserProfile(item, result);

			return result;
		}


		public IQueryable<UserProfile> GetQueryable_UserProfile()
		{
			return _ctx.Set<UserProfile>();
		}

			public async Task<UserProfile> Get_UserProfileAsync(int userProfileId, int numChildLevels)
			{
				var qryItem = GetQueryable_UserProfile().AsNoTracking();
				RunCustomLogicOnGetQueryableByPK_UserProfile(ref qryItem, userProfileId, numChildLevels);

				var dbItem = await qryItem.Where(x => x.UserProfileId == userProfileId).FirstOrDefaultAsync();
				if (!(dbItem is null))
				{
					RunCustomLogicOnGetEntityByPK_UserProfile(ref dbItem, userProfileId, numChildLevels);
				}

				return dbItem;
			}

			public async Task<UserProfile> GetFirstOrDefaultAsync(UserProfile item)
			{
				return await _ctx.UserProfiles.Where(x => x.UserProfileId == item.UserProfileId).FirstOrDefaultAsync();
			}


		public async Task<IRepositoryActionResult<UserProfile>> UpdateAsync(UserProfile item)
		{
			var oldItem = await _ctx.UserProfiles.FirstOrDefaultAsync(x => x.UserProfileId == item.UserProfileId);
			var result = await UpdateAsync<UserProfile>(item, oldItem);
			RunCustomLogicAfterUpdate_UserProfile(newItem: item, oldItem: oldItem, result: result);

			return result;
		}

			public async Task<IRepositoryActionResult<UserProfile>> Delete_UserProfileAsync(int userProfileId)
			{
				return await DeleteAsync<UserProfile>(_ctx.UserProfiles.Where(x => x.UserProfileId == userProfileId).FirstOrDefault());
			}
			public async Task<IRepositoryActionResult<UserProfile>> DeleteAsync(UserProfile item)
			{
				return await DeleteAsync<UserProfile>(_ctx.UserProfiles.Where(x => x.UserProfileId == item.UserProfileId).FirstOrDefault());
			}

		partial void RunCustomLogicAfterInsert_UserProfile(UserProfile item, IRepositoryActionResult<UserProfile> result);

		partial void RunCustomLogicAfterUpdate_UserProfile(UserProfile newItem, UserProfile oldItem, IRepositoryActionResult<UserProfile> result);

		partial void RunCustomLogicOnGetQueryableByPK_UserProfile(ref IQueryable<UserProfile> qryItem, int userProfileId, int numChildLevels);

		partial void RunCustomLogicOnGetEntityByPK_UserProfile(ref UserProfile dbItem, int userProfileId, int numChildLevels);



		#endregion UserProfile

	}
}
