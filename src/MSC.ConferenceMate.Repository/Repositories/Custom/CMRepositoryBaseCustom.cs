// <auto-generated> - Template:RepositoryBasePartialMethods, Version:1.1, Id:ee9fed0b-0773-4b23-a17f-a9fb2004f9be
using System;
using System.Data.Entity;
using System.Linq;
using entCM = MSC.ConferenceMate.Repository.Entities.CM;
using MSC.ConferenceMate.Repository.Interface;
using CodeGenHero.Repository;

namespace MSC.ConferenceMate.Repository
{
	public abstract partial class CMRepositoryBase : ICMRepositoryCrud
	{

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Announcement(ref IQueryable<entCM.Announcement> qryItem, int announcementId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Announcement(ref entCM.Announcement dbItem, int announcementId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_FeaturedEvent(ref IQueryable<entCM.FeaturedEvent> qryItem, int featuredEventId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.Feedbacks).AsNoTracking()
				 .Include(x => x.SponsorFeaturedEvents).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_FeaturedEvent(ref entCM.FeaturedEvent dbItem, int featuredEventId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Feedback(ref IQueryable<entCM.Feedback> qryItem, System.Guid feedbackId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 // .Include(x => x.FeaturedEvent).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.FeedbackInitiatorType).AsNoTracking()
				 .Include(x => x.FeedbackType).AsNoTracking()
				 // .Include(x => x.Session).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.User).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Feedback(ref entCM.Feedback dbItem, System.Guid feedbackId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_FeedbackInitiatorType(ref IQueryable<entCM.FeedbackInitiatorType> qryItem, int feedbackInitiatorTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Feedbacks).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_FeedbackInitiatorType(ref entCM.FeedbackInitiatorType dbItem, int feedbackInitiatorTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_FeedbackType(ref IQueryable<entCM.FeedbackType> qryItem, int feedbackTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Feedbacks).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_FeedbackType(ref entCM.FeedbackType dbItem, int feedbackTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_GenderType(ref IQueryable<entCM.GenderType> qryItem, int genderTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Users).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_GenderType(ref entCM.GenderType dbItem, int genderTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_LanguageType(ref IQueryable<entCM.LanguageType> qryItem, int languageTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.LookupLists).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Users).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_LanguageType(ref entCM.LanguageType dbItem, int languageTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_LookupList(ref IQueryable<entCM.LookupList> qryItem, int lookupListId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.LanguageType).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_LookupList(ref entCM.LookupList dbItem, int lookupListId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Room(ref IQueryable<entCM.Room> qryItem, int roomId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Sessions).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Room(ref entCM.Room dbItem, int roomId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Session(ref IQueryable<entCM.Session> qryItem, int sessionId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.Room).AsNoTracking()
				 .Include(x => x.Feedbacks).AsNoTracking()
				 .Include(x => x.SessionLikes).AsNoTracking()
				 .Include(x => x.SessionSessionCategoryTypes).AsNoTracking()
				 .Include(x => x.SessionSpeakers).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Session(ref entCM.Session dbItem, int sessionId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SessionCategoryType(ref IQueryable<entCM.SessionCategoryType> qryItem, int sessionCategoryTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.SessionSessionCategoryTypes).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SessionCategoryType(ref entCM.SessionCategoryType dbItem, int sessionCategoryTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SessionLike(ref IQueryable<entCM.SessionLike> qryItem, System.Guid sessionLikeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Session).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.User).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SessionLike(ref entCM.SessionLike dbItem, System.Guid sessionLikeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SessionSessionCategoryType(ref IQueryable<entCM.SessionSessionCategoryType> qryItem, int sessionId, int sessionCategoryTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Session).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.SessionCategoryType).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SessionSessionCategoryType(ref entCM.SessionSessionCategoryType dbItem, int sessionId, int sessionCategoryTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SessionSpeaker(ref IQueryable<entCM.SessionSpeaker> qryItem, int sessionId, int userId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Session).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.User).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SessionSpeaker(ref entCM.SessionSpeaker dbItem, int sessionId, int userId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_Sponsor(ref IQueryable<entCM.Sponsor> qryItem, int sponsorId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.SponsorType).AsNoTracking()
				 .Include(x => x.SponsorFeaturedEvents).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_Sponsor(ref entCM.Sponsor dbItem, int sponsorId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SponsorFeaturedEvent(ref IQueryable<entCM.SponsorFeaturedEvent> qryItem, int sponsorId, int featuredEventId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.FeaturedEvent).AsNoTracking(); -- Excluded navigation property per configuration.
				 // .Include(x => x.Sponsor).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SponsorFeaturedEvent(ref entCM.SponsorFeaturedEvent dbItem, int sponsorId, int featuredEventId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_SponsorType(ref IQueryable<entCM.SponsorType> qryItem, int sponsorTypeId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem;
				 // .Include(x => x.Sponsors).AsNoTracking(); -- Excluded navigation property per configuration.
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_SponsorType(ref entCM.SponsorType dbItem, int sponsorTypeId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }

		/// <summary>
		/// Custom logic that is generally used to include related entities to return with the parent entity that was requested.
		/// </summary>
		/// <param name="qryItem"></param>
		/// <param name="id"></param>
		/// <param name="numChildLevels"></param>
		 partial void RunCustomLogicOnGetQueryableByPK_User(ref IQueryable<entCM.User> qryItem, int userId, int numChildLevels)
		 {
			 if (numChildLevels > 0)
			 {
				 qryItem = qryItem
				 .Include(x => x.GenderType).AsNoTracking()
				 .Include(x => x.LanguageType).AsNoTracking()
				 // .Include(x => x.Feedbacks).AsNoTracking() -- Excluded navigation property per configuration.
				 .Include(x => x.SessionLikes).AsNoTracking()
				 .Include(x => x.SessionSpeakers).AsNoTracking();
			 }
		 }


		///// <summary>
		///// A sample implementation of custom logic used to either manipulate a DTO item or include related entities.
		///// </summary>
		///// <param name="dbItem"></param>
		///// <param name="id"></param>
		///// <param name="numChildLevels"></param>
		// partial void RunCustomLogicOnGetEntityByPK_User(ref entCM.User dbItem, int userId, int numChildLevels)
		// {
			// if (numChildLevels > 1)
			// {
				// int[] orderLineItemIds = dbItem.OrderLineItems.Select(x => x.OrderLineItemId).ToArray();

				// var lineItemDiscounts = Repo.CMDataContext.OrderLineItemDiscounts.Where(x => orderLineItemIds.Contains(x.OrderLineItemId)).ToList();

				// foreach (var lineItemDiscount in lineItemDiscounts)
				// { // Find the match and add the item to it.
					// var orderLineItem = dbItem.OrderLineItems.Where(x => x.OrderLineItemId == lineItemDiscount.OrderLineItemId).FirstOrDefault();

					// if (orderLineItem == null)
					// {
						// throw new System.Data.Entity.Core.ObjectNotFoundException($"Unable to locate matching OrderLineItem record for {lineItemDiscount.OrderLineItemId}."
					// }

					// orderLineItem.LineItemDiscounts.Add(lineItemDiscount);
				// }
			// }

		// }
	}
}

